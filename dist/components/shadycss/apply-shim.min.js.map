{"version":3,"sources":["src/template-map.js","src/css-parse.js","src/apply-shim-utils.js","src/common-regex.js","src/style-settings.js","src/style-util.js","src/apply-shim.js","src/common-utils.js","src/document-wait.js","entrypoints/apply-shim.js"],"names":["templateMap","constructor","StyleNode","parse$$module$src$css_parse","parse","text","replace","RX$$module$src$css_parse.comments","RX$$module$src$css_parse.port","parseCss","root","length","n","i","l","OPEN_BRACE","p","previous","push","CLOSE_BRACE","parseCss$$module$src$css_parse","node","t","substring","trim","ss","_expandUnicodeEscapes","RX$$module$src$css_parse.multipleSpaces","lastIndexOf","s","indexOf","AT_START","MEDIA_START","match","RX$$module$src$css_parse.keyframesRule","types$$module$src$css_parse.KEYFRAMES_RULE","split","pop","types$$module$src$css_parse.MEDIA_RULE","VAR_START","types$$module$src$css_parse.STYLE_RULE","types$$module$src$css_parse.MIXIN_RULE","r$","r","_expandUnicodeEscapes$$module$src$css_parse","code","repeat","stringify$$module$src$css_parse","stringify","preserveProperties","cssText","rules","RX$$module$src$css_parse.customProp","RX$$module$src$css_parse.mixinProp","RX$$module$src$css_parse.mixinApply","RX$$module$src$css_parse.varApply","STYLE_RULE","KEYFRAMES_RULE","MEDIA_RULE","MIXIN_RULE","comments","port","customProp","mixinProp","mixinApply","varApply","keyframesRule","multipleSpaces","promise","Promise","resolve","invalidate$$module$src$apply_shim_utils","invalidate","elementName","template","templateIsValid$$module$src$apply_shim_utils","templateIsValid","startValidatingTemplate$$module$src$apply_shim_utils","startValidatingTemplate","_validating","then","VAR_ASSIGN","MIXIN_MATCH","MEDIA_MATCH","nativeShadow","window","nativeCssVariables","calcCssVariables$$module$src$style_settings","calcCssVariables","settings","navigator","userAgent","CSS","supports","ShadyCSS","undefined","nativeCss","module$src$style_settings.nativeCssVariables","toCssText$$module$src$style_util","toCssText","rulesForStyle$$module$src$style_util","rulesForStyle","style","textContent","forEachRule$$module$src$style_util","forEachRule","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","type","matchMedia","matches","processVariableAndFallback$$module$src$style_util","processVariableAndFallback","str","callback","start","level","inner","end","prefix","suffix","comma","value","fallback","APPLY_NAME_CLEAN","INITIAL_INHERIT","MixinMap","_map","set","name","props","properties","dependants","get","invalidCallback","ApplyShim","_measureElement","_currentElement","detectMixin","has","test","lastIndex","transformTemplate","content","querySelector","ast","transformStyle","transformRules","transformCustomStyle","rule","transformRule","transformCssText","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","_consumeCssProperties","m","exec","mixinName","idx","index","textBeforeApply","slice","textAfterApply","defaults","_cssTextToMap","_atApplyToCssProperties","vars","mixinEntry","f","fallbacks","parts","MIXIN_VAR_SEP","join","replacement","property","out","sp","_replaceInitialOrInherit","document","createElement","setAttribute","all","head","appendChild","getComputedStyle","getPropertyValue","_invalidateMixinEntry","mixinAsProperties","combinedProps","mixinValues","oldProps","Object","assign","create","needToInvalidate","v","prototype","defineProperty","cb","readyPromise","whenReady","resolveFn","documentWait$$module$src$document_wait","documentWait","requestAnimationFrame","readyState","addEventListener","applyShim","ApplyShimInterface","customStyleInterface","ensure","CustomStyleInterface","flushCustomStyles","prepareTemplate","styles","cs","styleSubtree","element","removeProperty","setProperty","shadowRoot","styleElement","shadowChildren","children","childNodes","localName","is","getAttribute","styleDocument","body","ScopingShim","applyShimInterface","getComputedStyleValue"],"mappings":"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","file":"apply-shim.min.js","sourcesContent":["/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\n/**\r\n * @const {!Object<string, !HTMLTemplateElement>}\r\n */\r\nconst templateMap = {};\r\nexport default templateMap;\r\n","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/*\r\nExtremely simple css parser. Intended to be not more than what we need\r\nand definitely not necessarily correct =).\r\n*/\r\n\r\n'use strict';\r\n\r\n/** @unrestricted */\r\nclass StyleNode {\r\n  constructor() {\r\n    /** @type {number} */\r\n    this['start'] = 0;\r\n    /** @type {number} */\r\n    this['end'] = 0;\r\n    /** @type {StyleNode} */\r\n    this['previous'] = null;\r\n    /** @type {StyleNode} */\r\n    this['parent'] = null;\r\n    /** @type {Array<StyleNode>} */\r\n    this['rules'] = null;\r\n    /** @type {string} */\r\n    this['parsedCssText'] = '';\r\n    /** @type {string} */\r\n    this['cssText'] = '';\r\n    /** @type {boolean} */\r\n    this['atRule'] = false;\r\n    /** @type {number} */\r\n    this['type'] = 0;\r\n    /** @type {string} */\r\n    this['keyframesName'] = '';\r\n    /** @type {string} */\r\n    this['selector'] = '';\r\n    /** @type {string} */\r\n    this['parsedSelector'] = '';\r\n  }\r\n}\r\n\r\nexport {StyleNode}\r\n\r\n// given a string of css, return a simple rule tree\r\n/**\r\n * @param {string} text\r\n * @return {StyleNode}\r\n */\r\nexport function parse(text) {\r\n  text = clean(text);\r\n  return parseCss(lex(text), text);\r\n}\r\n\r\n// remove stuff we don't care about that may hinder parsing\r\n/**\r\n * @param {string} cssText\r\n * @return {string}\r\n */\r\nfunction clean(cssText) {\r\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\r\n}\r\n\r\n// super simple {...} lexer that returns a node tree\r\n/**\r\n * @param {string} text\r\n * @return {StyleNode}\r\n */\r\nfunction lex(text) {\r\n  let root = new StyleNode();\r\n  root['start'] = 0;\r\n  root['end'] = text.length\r\n  let n = root;\r\n  for (let i = 0, l = text.length; i < l; i++) {\r\n    if (text[i] === OPEN_BRACE) {\r\n      if (!n['rules']) {\r\n        n['rules'] = [];\r\n      }\r\n      let p = n;\r\n      let previous = p['rules'][p['rules'].length - 1] || null;\r\n      n = new StyleNode();\r\n      n['start'] = i + 1;\r\n      n['parent'] = p;\r\n      n['previous'] = previous;\r\n      p['rules'].push(n);\r\n    } else if (text[i] === CLOSE_BRACE) {\r\n      n['end'] = i + 1;\r\n      n = n['parent'] || root;\r\n    }\r\n  }\r\n  return root;\r\n}\r\n\r\n// add selectors/cssText to node tree\r\n/**\r\n * @param {StyleNode} node\r\n * @param {string} text\r\n * @return {StyleNode}\r\n */\r\nfunction parseCss(node, text) {\r\n  let t = text.substring(node['start'], node['end'] - 1);\r\n  node['parsedCssText'] = node['cssText'] = t.trim();\r\n  if (node['parent']) {\r\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\r\n    t = text.substring(ss, node['start'] - 1);\r\n    t = _expandUnicodeEscapes(t);\r\n    t = t.replace(RX.multipleSpaces, ' ');\r\n    // TODO(sorvell): ad hoc; make selector include only after last ;\r\n    // helps with mixin syntax\r\n    t = t.substring(t.lastIndexOf(';') + 1);\r\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\r\n    node['atRule'] = (s.indexOf(AT_START) === 0);\r\n    // note, support a subset of rule types...\r\n    if (node['atRule']) {\r\n      if (s.indexOf(MEDIA_START) === 0) {\r\n        node['type'] = types.MEDIA_RULE;\r\n      } else if (s.match(RX.keyframesRule)) {\r\n        node['type'] = types.KEYFRAMES_RULE;\r\n        node['keyframesName'] =\r\n          node['selector'].split(RX.multipleSpaces).pop();\r\n      }\r\n    } else {\r\n      if (s.indexOf(VAR_START) === 0) {\r\n        node['type'] = types.MIXIN_RULE;\r\n      } else {\r\n        node['type'] = types.STYLE_RULE;\r\n      }\r\n    }\r\n  }\r\n  let r$ = node['rules'];\r\n  if (r$) {\r\n    for (let i = 0, l = r$.length, r;\r\n      (i < l) && (r = r$[i]); i++) {\r\n      parseCss(r, text);\r\n    }\r\n  }\r\n  return node;\r\n}\r\n\r\n/**\r\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\r\n * expanded form that doesn't require trailing space `\\000033`\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nfunction _expandUnicodeEscapes(s) {\r\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\r\n    let code = arguments[1],\r\n      repeat = 6 - code.length;\r\n    while (repeat--) {\r\n      code = '0' + code;\r\n    }\r\n    return '\\\\' + code;\r\n  });\r\n}\r\n\r\n/**\r\n * stringify parsed css.\r\n * @param {StyleNode} node\r\n * @param {boolean=} preserveProperties\r\n * @param {string=} text\r\n * @return {string}\r\n */\r\nexport function stringify(node, preserveProperties, text = '') {\r\n  // calc rule cssText\r\n  let cssText = '';\r\n  if (node['cssText'] || node['rules']) {\r\n    let r$ = node['rules'];\r\n    if (r$ && !_hasMixinRules(r$)) {\r\n      for (let i = 0, l = r$.length, r;\r\n        (i < l) && (r = r$[i]); i++) {\r\n        cssText = stringify(r, preserveProperties, cssText);\r\n      }\r\n    } else {\r\n      cssText = preserveProperties ? node['cssText'] :\r\n        removeCustomProps(node['cssText']);\r\n      cssText = cssText.trim();\r\n      if (cssText) {\r\n        cssText = '  ' + cssText + '\\n';\r\n      }\r\n    }\r\n  }\r\n  // emit rule if there is cssText\r\n  if (cssText) {\r\n    if (node['selector']) {\r\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\r\n    }\r\n    text += cssText;\r\n    if (node['selector']) {\r\n      text += CLOSE_BRACE + '\\n\\n';\r\n    }\r\n  }\r\n  return text;\r\n}\r\n\r\n/**\r\n * @param {Array<StyleNode>} rules\r\n * @return {boolean}\r\n */\r\nfunction _hasMixinRules(rules) {\r\n  let r = rules[0];\r\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\r\n}\r\n\r\n/**\r\n * @param {string} cssText\r\n * @return {string}\r\n */\r\nfunction removeCustomProps(cssText) {\r\n  cssText = removeCustomPropAssignment(cssText);\r\n  return removeCustomPropApply(cssText);\r\n}\r\n\r\n/**\r\n * @param {string} cssText\r\n * @return {string}\r\n */\r\nexport function removeCustomPropAssignment(cssText) {\r\n  return cssText\r\n    .replace(RX.customProp, '')\r\n    .replace(RX.mixinProp, '');\r\n}\r\n\r\n/**\r\n * @param {string} cssText\r\n * @return {string}\r\n */\r\nfunction removeCustomPropApply(cssText) {\r\n  return cssText\r\n    .replace(RX.mixinApply, '')\r\n    .replace(RX.varApply, '');\r\n}\r\n\r\n/** @enum {number} */\r\nexport const types = {\r\n  STYLE_RULE: 1,\r\n  KEYFRAMES_RULE: 7,\r\n  MEDIA_RULE: 4,\r\n  MIXIN_RULE: 1000\r\n}\r\n\r\nconst OPEN_BRACE = '{';\r\nconst CLOSE_BRACE = '}';\r\n\r\n// helper regexp's\r\nconst RX = {\r\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\r\n  port: /@import[^;]*;/gim,\r\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\r\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\r\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\r\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\r\n  keyframesRule: /^@[^\\s]*keyframes/,\r\n  multipleSpaces: /\\s+/g\r\n}\r\n\r\nconst VAR_START = '--';\r\nconst MEDIA_START = '@media';\r\nconst AT_START = '@';\r\n","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\nimport templateMap from './template-map.js'\r\nimport {StyleNode} from './css-parse.js' // eslint-disable-line no-unused-vars\r\n\r\n/*\r\n * Utilities for handling invalidating apply-shim mixins for a given template.\r\n *\r\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\r\n * The template\r\n */\r\n\r\n/** @const {string} */\r\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\r\n\r\n/** @const {string} */\r\nconst NEXT_VERSION = '_applyShimNextVersion';\r\n\r\n/** @const {string} */\r\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\r\n\r\n/**\r\n * @const {Promise<void>}\r\n */\r\nconst promise = Promise.resolve();\r\n\r\n/**\r\n * @param {string} elementName\r\n */\r\nexport function invalidate(elementName){\r\n  let template = templateMap[elementName];\r\n  if (template) {\r\n    invalidateTemplate(template);\r\n  }\r\n}\r\n\r\n/**\r\n * This function can be called multiple times to mark a template invalid\r\n * and signal that the style inside must be regenerated.\r\n *\r\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\r\n * During that cycle, call `templateIsValidating` to see if the template must\r\n * be revalidated\r\n * @param {HTMLTemplateElement} template\r\n */\r\nexport function invalidateTemplate(template) {\r\n  // default the current version to 0\r\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\r\n  // ensure the \"validating for\" flag exists\r\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\r\n  // increment the next version\r\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\r\n}\r\n\r\n/**\r\n * @param {string} elementName\r\n * @return {boolean}\r\n */\r\nexport function isValid(elementName) {\r\n  let template = templateMap[elementName];\r\n  if (template) {\r\n    return templateIsValid(template);\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {HTMLTemplateElement} template\r\n * @return {boolean}\r\n */\r\nexport function templateIsValid(template) {\r\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\r\n}\r\n\r\n/**\r\n * @param {string} elementName\r\n * @return {boolean}\r\n */\r\nexport function isValidating(elementName) {\r\n  let template = templateMap[elementName];\r\n  if (template) {\r\n    return templateIsValidating(template);\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\r\n * If false, the template must be validated.\r\n * @param {HTMLTemplateElement} template\r\n * @return {boolean}\r\n */\r\nexport function templateIsValidating(template) {\r\n  return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];\r\n}\r\n\r\n/**\r\n * the template is marked as `validating` for one microtask so that all instances\r\n * found in the tree crawl of `applyStyle` will update themselves,\r\n * but the template will only be updated once.\r\n * @param {string} elementName\r\n*/\r\nexport function startValidating(elementName) {\r\n  let template = templateMap[elementName];\r\n  startValidatingTemplate(template);\r\n}\r\n\r\n/**\r\n * Begin an asynchronous invalidation cycle.\r\n * This should be called after every validation of a template\r\n *\r\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\r\n * @param {HTMLTemplateElement} template\r\n */\r\nexport function startValidatingTemplate(template) {\r\n  // remember that the current \"next version\" is the reason for this validation cycle\r\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\r\n  // however, there only needs to be one async task to clear the counters\r\n  if (!template._validating) {\r\n    template._validating = true;\r\n    promise.then(function() {\r\n      // sync the current version to let future invalidations cause a refresh cycle\r\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\r\n      template._validating = false;\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @return {boolean}\r\n */\r\nexport function elementsAreInvalid() {\r\n  for (let elementName in templateMap) {\r\n    let template = templateMap[elementName];\r\n    if (!templateIsValid(template)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi;\r\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\r\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\r\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\r\nexport const MEDIA_MATCH = /@media\\s(.*)/;\r\nexport const IS_VAR = /^--/;\r\nexport const BRACKETED = /\\{[^}]*\\}/g;\r\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\r\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';\r\n","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nexport let nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\r\nexport let nativeCssVariables;\r\n\r\n/**\r\n * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings\r\n */\r\nfunction calcCssVariables(settings) {\r\n  if (settings && settings['shimcssproperties']) {\r\n    nativeCssVariables = false;\r\n  } else {\r\n    // chrome 49 has semi-working css vars, check if box-shadow works\r\n    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\r\n    // However, shim css custom properties are only supported with ShadyDOM enabled,\r\n    // so fall back on native if we do not detect ShadyDOM\r\n    nativeCssVariables = nativeShadow || Boolean(!navigator.userAgent.match('AppleWebKit/601') &&\r\n      window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\r\n  }\r\n}\r\n\r\nif (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {\r\n  nativeCssVariables = window.ShadyCSS.nativeCss;\r\n} else if (window.ShadyCSS) {\r\n  calcCssVariables(window.ShadyCSS);\r\n  // reset window variable to let ShadyCSS API take its place\r\n  window.ShadyCSS = undefined;\r\n} else {\r\n  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);\r\n}","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport {nativeShadow, nativeCssVariables} from './style-settings.js'\r\nimport {parse, stringify, types, StyleNode} from './css-parse.js' // eslint-disable-line no-unused-vars\r\nimport {MEDIA_MATCH} from './common-regex.js';\r\n\r\n/**\r\n * @param {string|StyleNode} rules\r\n * @param {function(StyleNode)=} callback\r\n * @return {string}\r\n */\r\nexport function toCssText (rules, callback) {\r\n  if (!rules) {\r\n    return '';\r\n  }\r\n  if (typeof rules === 'string') {\r\n    rules = parse(rules);\r\n  }\r\n  if (callback) {\r\n    forEachRule(rules, callback);\r\n  }\r\n  return stringify(rules, nativeCssVariables);\r\n}\r\n\r\n/**\r\n * @param {HTMLStyleElement} style\r\n * @return {StyleNode}\r\n */\r\nexport function rulesForStyle(style) {\r\n  if (!style['__cssRules'] && style.textContent) {\r\n    style['__cssRules'] = parse(style.textContent);\r\n  }\r\n  return style['__cssRules'] || null;\r\n}\r\n\r\n// Tests if a rule is a keyframes selector, which looks almost exactly\r\n// like a normal selector but is not (it has nothing to do with scoping\r\n// for example).\r\n/**\r\n * @param {StyleNode} rule\r\n * @return {boolean}\r\n */\r\nexport function isKeyframesSelector(rule) {\r\n  return Boolean(rule['parent']) &&\r\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\r\n}\r\n\r\n/**\r\n * @param {StyleNode} node\r\n * @param {Function=} styleRuleCallback\r\n * @param {Function=} keyframesRuleCallback\r\n * @param {boolean=} onlyActiveRules\r\n */\r\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\r\n  if (!node) {\r\n    return;\r\n  }\r\n  let skipRules = false;\r\n  let type = node['type'];\r\n  if (onlyActiveRules) {\r\n    if (type === types.MEDIA_RULE) {\r\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\r\n      if (matchMedia) {\r\n        // if rule is a non matching @media rule, skip subrules\r\n        if (!window.matchMedia(matchMedia[1]).matches) {\r\n          skipRules = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (type === types.STYLE_RULE) {\r\n    styleRuleCallback(node);\r\n  } else if (keyframesRuleCallback &&\r\n    type === types.KEYFRAMES_RULE) {\r\n    keyframesRuleCallback(node);\r\n  } else if (type === types.MIXIN_RULE) {\r\n    skipRules = true;\r\n  }\r\n  let r$ = node['rules'];\r\n  if (r$ && !skipRules) {\r\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\r\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\r\n    }\r\n  }\r\n}\r\n\r\n// add a string of cssText to the document.\r\n/**\r\n * @param {string} cssText\r\n * @param {string} moniker\r\n * @param {Node} target\r\n * @param {Node} contextNode\r\n * @return {HTMLStyleElement}\r\n */\r\nexport function applyCss(cssText, moniker, target, contextNode) {\r\n  let style = createScopeStyle(cssText, moniker);\r\n  applyStyle(style, target, contextNode);\r\n  return style;\r\n}\r\n\r\n/**\r\n * @param {string} cssText\r\n * @param {string} moniker\r\n * @return {HTMLStyleElement}\r\n */\r\nexport function createScopeStyle(cssText, moniker) {\r\n  let style = /** @type {HTMLStyleElement} */(document.createElement('style'));\r\n  if (moniker) {\r\n    style.setAttribute('scope', moniker);\r\n  }\r\n  style.textContent = cssText;\r\n  return style;\r\n}\r\n\r\n/**\r\n * Track the position of the last added style for placing placeholders\r\n * @type {Node}\r\n */\r\nlet lastHeadApplyNode = null;\r\n\r\n// insert a comment node as a styling position placeholder.\r\n/**\r\n * @param {string} moniker\r\n * @return {!Comment}\r\n */\r\nexport function applyStylePlaceHolder(moniker) {\r\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\r\n    moniker + ' ');\r\n  let after = lastHeadApplyNode ?\r\n    lastHeadApplyNode['nextSibling'] : null;\r\n  let scope = document.head;\r\n  scope.insertBefore(placeHolder, after || scope.firstChild);\r\n  lastHeadApplyNode = placeHolder;\r\n  return placeHolder;\r\n}\r\n\r\n/**\r\n * @param {HTMLStyleElement} style\r\n * @param {?Node} target\r\n * @param {?Node} contextNode\r\n */\r\nexport function applyStyle(style, target, contextNode) {\r\n  target = target || document.head;\r\n  let after = (contextNode && contextNode.nextSibling) ||\r\n    target.firstChild;\r\n  target.insertBefore(style, after);\r\n  if (!lastHeadApplyNode) {\r\n    lastHeadApplyNode = style;\r\n  } else {\r\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\r\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\r\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\r\n      lastHeadApplyNode = style;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} buildType\r\n * @return {boolean}\r\n */\r\nexport function isTargetedBuild(buildType) {\r\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\r\n}\r\n\r\n/**\r\n * @param {Element} element\r\n * @return {?string}\r\n */\r\nexport function getCssBuildType(element) {\r\n  return element.getAttribute('css-build');\r\n}\r\n\r\n/**\r\n * Walk from text[start] matching parens and\r\n * returns position of the outer end paren\r\n * @param {string} text\r\n * @param {number} start\r\n * @return {number}\r\n */\r\nfunction findMatchingParen(text, start) {\r\n  let level = 0;\r\n  for (let i=start, l=text.length; i < l; i++) {\r\n    if (text[i] === '(') {\r\n      level++;\r\n    } else if (text[i] === ')') {\r\n      if (--level === 0) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * @param {string} str\r\n * @param {function(string, string, string, string)} callback\r\n */\r\nexport function processVariableAndFallback(str, callback) {\r\n  // find 'var('\r\n  let start = str.indexOf('var(');\r\n  if (start === -1) {\r\n    // no var?, everything is prefix\r\n    return callback(str, '', '', '');\r\n  }\r\n  //${prefix}var(${inner})${suffix}\r\n  let end = findMatchingParen(str, start + 3);\r\n  let inner = str.substring(start + 4, end);\r\n  let prefix = str.substring(0, start);\r\n  // suffix may have other variables\r\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\r\n  let comma = inner.indexOf(',');\r\n  // value and fallback args should be trimmed to match in property lookup\r\n  if (comma === -1) {\r\n    // variable, no fallback\r\n    return callback(prefix, inner.trim(), '', suffix);\r\n  }\r\n  // var(${value},${fallback})\r\n  let value = inner.substring(0, comma).trim();\r\n  let fallback = inner.substring(comma + 1).trim();\r\n  return callback(prefix, value, fallback, suffix);\r\n}\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {string} value\r\n */\r\nexport function setElementClassRaw(element, value) {\r\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\r\n  if (nativeShadow) {\r\n    element.setAttribute('class', value);\r\n  } else {\r\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element | {is: string, extends: string}} element\r\n * @return {{is: string, typeExtension: string}}\r\n */\r\nexport function getIsExtends(element) {\r\n  let localName = element['localName'];\r\n  let is = '', typeExtension = '';\r\n  /*\r\n  NOTE: technically, this can be wrong for certain svg elements\r\n  with `-` in the name like `<font-face>`\r\n  */\r\n  if (localName) {\r\n    if (localName.indexOf('-') > -1) {\r\n      is = localName;\r\n    } else {\r\n      typeExtension = localName;\r\n      is = (element.getAttribute && element.getAttribute('is')) || '';\r\n    }\r\n  } else {\r\n    is = /** @type {?} */(element).is;\r\n    typeExtension = /** @type {?} */(element).extends;\r\n  }\r\n  return {is, typeExtension};\r\n}\r\n","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n/*\r\n * The apply shim simulates the behavior of `@apply` proposed at\r\n * https://tabatkins.github.io/specs/css-apply-rule/.\r\n * The approach is to convert a property like this:\r\n *\r\n *    --foo: {color: red; background: blue;}\r\n *\r\n * to this:\r\n *\r\n *    --foo_-_color: red;\r\n *    --foo_-_background: blue;\r\n *\r\n * Then where `@apply --foo` is used, that is converted to:\r\n *\r\n *    color: var(--foo_-_color);\r\n *    background: var(--foo_-_background);\r\n *\r\n * This approach generally works but there are some issues and limitations.\r\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\r\n * another element sets it to:\r\n *\r\n *    --foo: { border: 2px solid red; }\r\n *\r\n * We must now ensure that the color and background from the previous setting\r\n * do not apply. This is accomplished by changing the property set to this:\r\n *\r\n *    --foo_-_border: 2px solid red;\r\n *    --foo_-_color: initial;\r\n *    --foo_-_background: initial;\r\n *\r\n * This works but introduces one new issue.\r\n * Consider this setup at the point where the `@apply` is used:\r\n *\r\n *    background: orange;\r\n *    `@apply` --foo;\r\n *\r\n * In this case the background will be unset (initial) rather than the desired\r\n * `orange`. We address this by altering the property set to use a fallback\r\n * value like this:\r\n *\r\n *    color: var(--foo_-_color);\r\n *    background: var(--foo_-_background, orange);\r\n *    border: var(--foo_-_border);\r\n *\r\n * Note that the default is retained in the property set and the `background` is\r\n * the desired `orange`. This leads us to a limitation.\r\n *\r\n * Limitation 1:\r\n\r\n * Only properties in the rule where the `@apply`\r\n * is used are considered as default values.\r\n * If another rule matches the element and sets `background` with\r\n * less specificity than the rule in which `@apply` appears,\r\n * the `background` will not be set.\r\n *\r\n * Limitation 2:\r\n *\r\n * When using Polymer's `updateStyles` api, new properties may not be set for\r\n * `@apply` properties.\r\n\r\n*/\r\n\r\n'use strict';\r\n\r\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText} from './style-util.js'\r\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js'\r\nimport {detectMixin} from './common-utils.js'\r\nimport {StyleNode} from './css-parse.js' // eslint-disable-line no-unused-vars\r\n\r\nconst APPLY_NAME_CLEAN = /;\\s*/m;\r\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\r\n\r\n// separator used between mixin-name and mixin-property-name when producing properties\r\n// NOTE: plain '-' may cause collisions in user styles\r\nconst MIXIN_VAR_SEP = '_-_';\r\n\r\n/**\r\n * @typedef {!Object<string, string>}\r\n */\r\nlet PropertyEntry; // eslint-disable-line no-unused-vars\r\n\r\n/**\r\n * @typedef {!Object<string, boolean>}\r\n */\r\nlet DependantsEntry; // eslint-disable-line no-unused-vars\r\n\r\n/** @typedef {{\r\n *    properties: PropertyEntry,\r\n *    dependants: DependantsEntry\r\n * }}\r\n */\r\nlet MixinMapEntry; // eslint-disable-line no-unused-vars\r\n\r\n// map of mixin to property names\r\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\r\nclass MixinMap {\r\n  constructor() {\r\n    /** @type {!Object<string, !MixinMapEntry>} */\r\n    this._map = {};\r\n  }\r\n  /**\r\n   * @param {string} name\r\n   * @param {!PropertyEntry} props\r\n   */\r\n  set(name, props) {\r\n    name = name.trim();\r\n    this._map[name] = {\r\n      properties: props,\r\n      dependants: {}\r\n    }\r\n  }\r\n  /**\r\n   * @param {string} name\r\n   * @return {MixinMapEntry}\r\n   */\r\n  get(name) {\r\n    name = name.trim();\r\n    return this._map[name] || null;\r\n  }\r\n}\r\n\r\n/**\r\n * Callback for when an element is marked invalid\r\n * @type {?function(string)}\r\n */\r\nlet invalidCallback = null;\r\n\r\n/** @unrestricted */\r\nclass ApplyShim {\r\n  constructor() {\r\n    /** @type {?string} */\r\n    this._currentElement = null;\r\n    /** @type {HTMLMetaElement} */\r\n    this._measureElement = null;\r\n    this._map = new MixinMap();\r\n  }\r\n  /**\r\n   * return true if `cssText` contains a mixin definition or consumption\r\n   * @param {string} cssText\r\n   * @return {boolean}\r\n   */\r\n  detectMixin(cssText) {\r\n    return detectMixin(cssText);\r\n  }\r\n  /**\r\n   * @param {!HTMLTemplateElement} template\r\n   * @param {string} elementName\r\n   * @return {StyleNode}\r\n   */\r\n  transformTemplate(template, elementName) {\r\n    const style = /** @type {HTMLStyleElement} */(template.content.querySelector('style'));\r\n    /** @type {StyleNode} */\r\n    let ast = null;\r\n    if (style) {\r\n      ast = this.transformStyle(style, elementName);\r\n    }\r\n    return ast;\r\n  }\r\n  /**\r\n   * @param {!HTMLStyleElement} style\r\n   * @param {string} elementName\r\n   * @return {StyleNode}\r\n   */\r\n  transformStyle(style, elementName = '') {\r\n    let ast = rulesForStyle(style);\r\n    this.transformRules(ast, elementName);\r\n    style.textContent = toCssText(ast);\r\n    return ast;\r\n  }\r\n  /**\r\n   * @param {!HTMLStyleElement} style\r\n   * @return {StyleNode}\r\n   */\r\n  transformCustomStyle(style) {\r\n    let ast = rulesForStyle(style);\r\n    forEachRule(ast, (rule) => {\r\n      if (rule['selector'] === ':root') {\r\n        rule['selector'] = 'html';\r\n      }\r\n      this.transformRule(rule);\r\n    })\r\n    style.textContent = toCssText(ast);\r\n    return ast;\r\n  }\r\n  /**\r\n   * @param {StyleNode} rules\r\n   * @param {string} elementName\r\n   */\r\n  transformRules(rules, elementName) {\r\n    this._currentElement = elementName;\r\n    forEachRule(rules, (r) => {\r\n      this.transformRule(r);\r\n    });\r\n    this._currentElement = null;\r\n  }\r\n  /**\r\n   * @param {!StyleNode} rule\r\n   */\r\n  transformRule(rule) {\r\n    rule['cssText'] = this.transformCssText(rule['parsedCssText']);\r\n    // :root was only used for variable assignment in property shim,\r\n    // but generates invalid selectors with real properties.\r\n    // replace with `:host > *`, which serves the same effect\r\n    if (rule['selector'] === ':root') {\r\n      rule['selector'] = ':host > *';\r\n    }\r\n  }\r\n  /**\r\n   * @param {string} cssText\r\n   * @return {string}\r\n   */\r\n  transformCssText(cssText) {\r\n    // produce variables\r\n    cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>\r\n      this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin));\r\n    // consume mixins\r\n    return this._consumeCssProperties(cssText);\r\n  }\r\n  /**\r\n   * @param {string} property\r\n   * @return {string}\r\n   */\r\n  _getInitialValueForProperty(property) {\r\n    if (!this._measureElement) {\r\n      this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));\r\n      this._measureElement.setAttribute('apply-shim-measure', '');\r\n      this._measureElement.style.all = 'initial';\r\n      document.head.appendChild(this._measureElement);\r\n    }\r\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\r\n  }\r\n  /**\r\n   * replace mixin consumption with variable consumption\r\n   * @param {string} text\r\n   * @return {string}\r\n   */\r\n  _consumeCssProperties(text) {\r\n    /** @type {Array} */\r\n    let m = null;\r\n    // loop over text until all mixins with defintions have been applied\r\n    while((m = MIXIN_MATCH.exec(text))) {\r\n      let matchText = m[0];\r\n      let mixinName = m[1];\r\n      let idx = m.index;\r\n      // collect properties before apply to be \"defaults\" if mixin might override them\r\n      // match includes a \"prefix\", so find the start and end positions of @apply\r\n      let applyPos = idx + matchText.indexOf('@apply');\r\n      let afterApplyPos = idx + matchText.length;\r\n      // find props defined before this @apply\r\n      let textBeforeApply = text.slice(0, applyPos);\r\n      let textAfterApply = text.slice(afterApplyPos);\r\n      let defaults = this._cssTextToMap(textBeforeApply);\r\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\r\n      // use regex match position to replace mixin, keep linear processing time\r\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\r\n      // move regex search to _after_ replacement\r\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\r\n    }\r\n    return text;\r\n  }\r\n  /**\r\n   * produce variable consumption at the site of mixin consumption\r\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\r\n   * Example:\r\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\r\n   *\r\n   * @param {string} mixinName\r\n   * @param {Object} fallbacks\r\n   * @return {string}\r\n   */\r\n  _atApplyToCssProperties(mixinName, fallbacks) {\r\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\r\n    let vars = [];\r\n    let mixinEntry = this._map.get(mixinName);\r\n    // if we depend on a mixin before it is created\r\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\r\n    if (!mixinEntry) {\r\n      this._map.set(mixinName, {});\r\n      mixinEntry = this._map.get(mixinName);\r\n    }\r\n    if (mixinEntry) {\r\n      if (this._currentElement) {\r\n        mixinEntry.dependants[this._currentElement] = true;\r\n      }\r\n      let p, parts, f;\r\n      for (p in mixinEntry.properties) {\r\n        f = fallbacks && fallbacks[p];\r\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\r\n        if (f) {\r\n          parts.push(',', f);\r\n        }\r\n        parts.push(')');\r\n        vars.push(parts.join(''));\r\n      }\r\n    }\r\n    return vars.join('; ');\r\n  }\r\n\r\n  /**\r\n   * @param {string} property\r\n   * @param {string} value\r\n   * @return {string}\r\n   */\r\n  _replaceInitialOrInherit(property, value) {\r\n    let match = INITIAL_INHERIT.exec(value);\r\n    if (match) {\r\n      if (match[1]) {\r\n        // initial\r\n        // replace `initial` with the concrete initial value for this property\r\n        value = this._getInitialValueForProperty(property);\r\n      } else {\r\n        // inherit\r\n        // with this purposfully illegal value, the variable will be invalid at\r\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\r\n        // and for inheriting values, will behave similarly\r\n        // we cannot support the same behavior for non inheriting values like 'border'\r\n        value = 'apply-shim-inherit';\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * \"parse\" a mixin definition into a map of properties and values\r\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\r\n   * @param {string} text\r\n   * @return {!Object<string, string>}\r\n   */\r\n  _cssTextToMap(text) {\r\n    let props = text.split(';');\r\n    let property, value;\r\n    let out = {};\r\n    for (let i = 0, p, sp; i < props.length; i++) {\r\n      p = props[i];\r\n      if (p) {\r\n        sp = p.split(':');\r\n        // ignore lines that aren't definitions like @media\r\n        if (sp.length > 1) {\r\n          property = sp[0].trim();\r\n          // some properties may have ':' in the value, like data urls\r\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\r\n          out[property] = value;\r\n        }\r\n      }\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * @param {MixinMapEntry} mixinEntry\r\n   */\r\n  _invalidateMixinEntry(mixinEntry) {\r\n    if (!invalidCallback) {\r\n      return;\r\n    }\r\n    for (let elementName in mixinEntry.dependants) {\r\n      if (elementName !== this._currentElement) {\r\n        invalidCallback(elementName);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} matchText\r\n   * @param {string} propertyName\r\n   * @param {?string} valueProperty\r\n   * @param {?string} valueMixin\r\n   * @return {string}\r\n   */\r\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\r\n    // handle case where property value is a mixin\r\n    if (valueProperty) {\r\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\r\n      processVariableAndFallback(valueProperty, (prefix, value) => {\r\n        if (value && this._map.get(value)) {\r\n          valueMixin = `@apply ${value};`\r\n        }\r\n      });\r\n    }\r\n    if (!valueMixin) {\r\n      return matchText;\r\n    }\r\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\r\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\r\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\r\n    let combinedProps = mixinValues;\r\n    let mixinEntry = this._map.get(propertyName);\r\n    let oldProps = mixinEntry && mixinEntry.properties;\r\n    if (oldProps) {\r\n      // NOTE: since we use mixin, the map of properties is updated here\r\n      // and this is what we want.\r\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\r\n    } else {\r\n      this._map.set(propertyName, combinedProps);\r\n    }\r\n    let out = [];\r\n    let p, v;\r\n    // set variables defined by current mixin\r\n    let needToInvalidate = false;\r\n    for (p in combinedProps) {\r\n      v = mixinValues[p];\r\n      // if property not defined by current mixin, set initial\r\n      if (v === undefined) {\r\n        v = 'initial';\r\n      }\r\n      if (oldProps && !(p in oldProps)) {\r\n        needToInvalidate = true;\r\n      }\r\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\r\n    }\r\n    if (needToInvalidate) {\r\n      this._invalidateMixinEntry(mixinEntry);\r\n    }\r\n    if (mixinEntry) {\r\n      mixinEntry.properties = combinedProps;\r\n    }\r\n    // because the mixinMap is global, the mixin might conflict with\r\n    // a different scope's simple variable definition:\r\n    // Example:\r\n    // some style somewhere:\r\n    // --mixin1:{ ... }\r\n    // --mixin2: var(--mixin1);\r\n    // some other element:\r\n    // --mixin1: 10px solid red;\r\n    // --foo: var(--mixin1);\r\n    // In this case, we leave the original variable definition in place.\r\n    if (valueProperty) {\r\n      prefix = `${matchText};${prefix}`;\r\n    }\r\n    return `${prefix}${out.join('; ')};`;\r\n  }\r\n}\r\n\r\n/* exports */\r\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\r\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\r\nApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;\r\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\r\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\r\nApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;\r\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\r\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\r\n  /** @return {?function(string)} */\r\n  get() {\r\n    return invalidCallback;\r\n  },\r\n  /** @param {?function(string)} cb */\r\n  set(cb) {\r\n    invalidCallback = cb;\r\n  }\r\n});\r\n\r\nexport default ApplyShim;","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex'\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {Object=} properties\r\n */\r\nexport function updateNativeProperties(element, properties) {\r\n  // remove previous properties\r\n  for (let p in properties) {\r\n    // NOTE: for bc with shim, don't apply null values.\r\n    if (p === null) {\r\n      element.style.removeProperty(p);\r\n    } else {\r\n      element.style.setProperty(p, properties[p]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} element\r\n * @param {string} property\r\n * @return {string}\r\n */\r\nexport function getComputedStyleValue(element, property) {\r\n  /**\r\n   * @const {string}\r\n   */\r\n  const value = window.getComputedStyle(element).getPropertyValue(property);\r\n  if (!value) {\r\n    return '';\r\n  } else {\r\n    return value.trim();\r\n  }\r\n}\r\n\r\n/**\r\n * return true if `cssText` contains a mixin definition or consumption\r\n * @param {string} cssText\r\n * @return {boolean}\r\n */\r\nexport function detectMixin(cssText) {\r\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\r\n  // reset state of the regexes\r\n  MIXIN_MATCH.lastIndex = 0;\r\n  VAR_ASSIGN.lastIndex = 0;\r\n  return has;\r\n}","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\n/** @type {Promise<void>} */\r\nlet readyPromise = null;\r\n\r\n/** @type {?function(?function())} */\r\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\r\n\r\n/** @type {function()} */\r\nlet resolveFn;\r\n\r\n/**\r\n * @param {?function()} callback\r\n */\r\nexport default function documentWait(callback) {\r\n  requestAnimationFrame(function() {\r\n    if (whenReady) {\r\n      whenReady(callback)\r\n    } else {\r\n      if (!readyPromise) {\r\n        readyPromise = new Promise((resolve) => {resolveFn = resolve});\r\n        if (document.readyState === 'complete') {\r\n          resolveFn();\r\n        } else {\r\n          document.addEventListener('readystatechange', () => {\r\n            if (document.readyState === 'complete') {\r\n              resolveFn();\r\n            }\r\n          });\r\n        }\r\n      }\r\n      readyPromise.then(function(){ callback && callback(); });\r\n    }\r\n  });\r\n}\r\n","/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport ApplyShim from '../src/apply-shim.js'\r\nimport templateMap from '../src/template-map.js'\r\nimport {getIsExtends, toCssText} from '../src/style-util.js'\r\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js'\r\nimport documentWait from '../src/document-wait.js'\r\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js'\r\nimport {CustomStyleInterfaceInterface} from '../src/custom-style-interface.js' // eslint-disable-line no-unused-vars\r\nimport {nativeCssVariables, nativeShadow} from '../src/style-settings.js'\r\n\r\n/** @const {ApplyShim} */\r\nconst applyShim = new ApplyShim();\r\n\r\nclass ApplyShimInterface {\r\n  constructor() {\r\n    /** @type {?CustomStyleInterfaceInterface} */\r\n    this.customStyleInterface = null;\r\n    documentWait(() => {\r\n      this.ensure();\r\n    });\r\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\r\n  }\r\n  ensure() {\r\n    if (this.customStyleInterface) {\r\n      return;\r\n    }\r\n    this.customStyleInterface = window.ShadyCSS.CustomStyleInterface;\r\n    if (this.customStyleInterface) {\r\n      this.customStyleInterface['transformCallback'] = (style) => {\r\n        applyShim.transformCustomStyle(style);\r\n      };\r\n      this.customStyleInterface['validateCallback'] = () => {\r\n        requestAnimationFrame(() => {\r\n          if (this.customStyleInterface['enqueued']) {\r\n            this.flushCustomStyles();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @param {!HTMLTemplateElement} template\r\n   * @param {string} elementName\r\n   */\r\n  prepareTemplate(template, elementName) {\r\n    this.ensure();\r\n    templateMap[elementName] = template;\r\n    let ast = applyShim.transformTemplate(template, elementName);\r\n    // save original style ast to use for revalidating instances\r\n    template['_styleAst'] = ast;\r\n  }\r\n  flushCustomStyles() {\r\n    this.ensure();\r\n    if (!this.customStyleInterface) {\r\n      return;\r\n    }\r\n    let styles = this.customStyleInterface['processStyles']();\r\n    if (!this.customStyleInterface['enqueued']) {\r\n      return;\r\n    }\r\n    for (let i = 0; i < styles.length; i++ ) {\r\n      let cs = styles[i];\r\n      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\r\n      if (style) {\r\n        applyShim.transformCustomStyle(style);\r\n      }\r\n    }\r\n    this.customStyleInterface['enqueued'] = false;\r\n  }\r\n  /**\r\n   * @param {HTMLElement} element\r\n   * @param {Object=} properties\r\n   */\r\n  styleSubtree(element, properties) {\r\n    this.ensure();\r\n    if (properties) {\r\n      updateNativeProperties(element, properties);\r\n    }\r\n    if (element.shadowRoot) {\r\n      this.styleElement(element);\r\n      let shadowChildren = element.shadowRoot.children || element.shadowRoot.childNodes;\r\n      for (let i = 0; i < shadowChildren.length; i++) {\r\n        this.styleSubtree(/** @type {HTMLElement} */(shadowChildren[i]));\r\n      }\r\n    } else {\r\n      let children = element.children || element.childNodes;\r\n      for (let i = 0; i < children.length; i++) {\r\n        this.styleSubtree(/** @type {HTMLElement} */(children[i]));\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @param {HTMLElement} element\r\n   */\r\n  styleElement(element) {\r\n    this.ensure();\r\n    let {is} = getIsExtends(element);\r\n    let template = templateMap[is];\r\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\r\n      // only revalidate template once\r\n      if (!ApplyShimUtils.templateIsValidating(template)) {\r\n        this.prepareTemplate(template, is);\r\n        ApplyShimUtils.startValidatingTemplate(template);\r\n      }\r\n      // update this element instance\r\n      let root = element.shadowRoot;\r\n      if (root) {\r\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\r\n        if (style) {\r\n          // reuse the template's style ast, it has all the original css text\r\n          style['__cssRules'] = template['_styleAst'];\r\n          style.textContent = toCssText(template['_styleAst'])\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @param {Object=} properties\r\n   */\r\n  styleDocument(properties) {\r\n    this.ensure();\r\n    this.styleSubtree(document.body, properties);\r\n  }\r\n}\r\n\r\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\r\n  const applyShimInterface = new ApplyShimInterface();\r\n  let CustomStyleInterface = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\r\n\r\n  window.ShadyCSS = {\r\n    /**\r\n     * @param {!HTMLTemplateElement} template\r\n     * @param {string} elementName\r\n     * @param {string=} elementExtends\r\n     */\r\n    prepareTemplate(template, elementName, elementExtends) { // eslint-disable-line no-unused-vars\r\n      applyShimInterface.flushCustomStyles();\r\n      applyShimInterface.prepareTemplate(template, elementName)\r\n    },\r\n\r\n    /**\r\n     * @param {!HTMLElement} element\r\n     * @param {Object=} properties\r\n     */\r\n    styleSubtree(element, properties) {\r\n      applyShimInterface.flushCustomStyles();\r\n      applyShimInterface.styleSubtree(element, properties);\r\n    },\r\n\r\n    /**\r\n     * @param {!HTMLElement} element\r\n     */\r\n    styleElement(element) {\r\n      applyShimInterface.flushCustomStyles();\r\n      applyShimInterface.styleElement(element);\r\n    },\r\n\r\n    /**\r\n     * @param {Object=} properties\r\n     */\r\n    styleDocument(properties) {\r\n      applyShimInterface.flushCustomStyles();\r\n      applyShimInterface.styleDocument(properties);\r\n    },\r\n\r\n    /**\r\n     * @param {Element} element\r\n     * @param {string} property\r\n     * @return {string}\r\n     */\r\n    getComputedStyleValue(element, property) {\r\n      return getComputedStyleValue(element, property);\r\n    },\r\n    nativeCss: nativeCssVariables,\r\n    nativeShadow: nativeShadow\r\n  };\r\n\r\n  if (CustomStyleInterface) {\r\n    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\r\n  }\r\n}\r\n\r\nwindow.ShadyCSS.ApplyShim = applyShim;"]}